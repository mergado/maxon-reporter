#!/usr/bin/env php
<?php

if (!\Phar::canWrite()) {
	die("Cannot create PHAR files. (phar.readonly must be set to 0)");
}

const BUILD_TARGET = __DIR__ . '/../build/reporter.phar';
const TARGET_EXECUTABLE = __DIR__ . '/../build/reporter';
const APP_DIR = __DIR__ . '/../src';

info("Building PHAR ...");

$p = new Phar(BUILD_TARGET);

// Using our own iterator so we can pre-process each PHP file before adding it to the PHAR.
$srcIterator = new \RecursiveDirectoryIterator(
	APP_DIR,
	\RecursiveDirectoryIterator::SKIP_DOTS
);
foreach ($srcIterator as $file) {
	add_file_to_phar($p, $file, APP_DIR);
}

$p->setStub(get_stub());

info("Finishing up ...");
exec(sprintf("chmod +x %s", BUILD_TARGET)); // Mark as executable.
exec(sprintf("mv %s %s", BUILD_TARGET, TARGET_EXECUTABLE)); // Remove .phar from the filename.
info("Done.");

function get_stub() {

	$date = new \DateTime('now', new \DateTimeZone('UTC'));
	$datetime = $date->format('r');

	return <<<STUB
#!/usr/bin/env php
<?php
const COMPILED_AT = "$datetime";
const BINARY_PATH = __FILE__;
if (extension_loaded('phar')) {
	set_include_path('phar://' . __FILE__ . '/' . get_include_path());
	Phar::mapPhar('reporter');
	include 'phar://' . __FILE__ . '/reporter.php';
	die;
} else {
	die("Cannot execute PHAR archive. PHAR extension is not enabled.");
}
__HALT_COMPILER();
STUB;

}

function add_file_to_phar(\Phar $p, string $fullPath, string $srcDir) {

	// Cut off the original path to get file's internal PHAR path.
	$internalPath = str_replace($srcDir, null, $fullPath);

	// Strip whitespace of each file before putting it into phar.
	$stripped = php_strip_whitespace($fullPath);

	$p->addFromString($internalPath, $stripped);

}

function info(string $string) {
	echo "$string\n";
}
